import json
import networkx as nx
import matplotlib.pyplot as plt
from networkx_viewer import Viewer
import rglob


# Read the metadata from each json file
def read_json_file(file):
    with open(file) as f:
      data = json.load(f)
    return data

# Create graph based on files in the metadata directory 
def create_graph(files):
    data=[]
    color_map=['blue']*len(files)
    G = nx.DiGraph()
    for i,file in enumerate(files):
        #Read metadata files
        data.append(read_json_file(file))
        #Add information from each file as an independent node
        #The identification of the node is the UUID
        G.add_node(data[i]['UUID'])
        #Add the attributed of each node: uuid, name, creation-time, execution-command, and record-trail
        G.nodes[data[i]['UUID']]['1--UUID']=data[i]['UUID']
        G.nodes[data[i]['UUID']]['2--Name']=data[i]['Name']
        G.nodes[data[i]['UUID']]['3--CreationTime']=data[i]['CreationTime']
        G.nodes[data[i]['UUID']]['4--ExecutionCommand']=data[i]['ExecutionCommand']
        G.nodes[data[i]['UUID']]['5--RecordTrail']=data[i]['RecordTrail']
        #To do: Add a type cell based on record trail for each node and link this with the color
        G.nodes[data[i]['UUID']]['6--Type']="data"
        G.nodes[data[i]['UUID']]['color']="blue"
        if not(G.nodes[data[i]['UUID']]['5--RecordTrail']):
            G.nodes[data[i]['UUID']]['6--Type']="app"     
            G.nodes[data[i]['UUID']]['color']="orange"
            color_map[i]="orange"
    return G, color_map

# Connect nodes based on record trail
def connect_graph(G):
    #color_map=['blue']*len(G)
    #Get all the nodes
    list_G=list(G.nodes)
    #For each node
    for index,i in enumerate(list_G):
        # Find the index of the application container for coloring purposes `
        #if not(G.nodes[i]['5--RecordTrail']):
        #    color_map[index]='orange'
        # We go through the intermediate and output containers. To check if they are intermediate or output containers, we check that they have first a record trail (not app containers)
        # and then if they have input containers in their record trail (not input containers)
        if G.nodes[i]['5--RecordTrail'] and G.nodes[i]['5--RecordTrail']['InputContainers'] is not None:
            # For each input container we connect it to the application container in the record trail
            for j in G.nodes[i]['5--RecordTrail']['InputContainers']:
                G.add_edge(j['UUID'],G.nodes[i]['5--RecordTrail']['ApplicationContainer']['UUID'])
            # We assume that each intermediate and output container were generated by one application container
            # Therefore we add an edge between the application container and the output container
            G.add_edge(G.nodes[i]['5--RecordTrail']['ApplicationContainer']['UUID'],G.nodes[i]['5--RecordTrail']['OutputContainer']['UUID'])
    return G


def plot_graph (G, color_map, attribute):
    pos = nx.spring_layout(G)
    #labels = nx.get_node_attributes(G,attribute)
    nx.draw(G, pos, node_color=color_map, with_labels=True)
    plt.show()

